#version 300 es

precision highp float;

uniform sampler2D u_texture;

in vec2 v_texCoord;
out vec4 outColor;

// based on https://www.shadertoy.com/view/llKSDz

const float WL_LONGEST  = 780.0;
const float WL_SHORTEST = 380.0;
const float WL_RANGE    = WL_LONGEST - WL_SHORTEST;

const vec3[] CIE2006_XYZ = vec3[](
vec3(0.00019,0.0,0.0011),
vec3(0.00034,0.0,0.00183),
vec3(0.00052,0.00002,0.00268),
vec3(0.00073,0.00004,0.00369),
vec3(0.00098,0.00007,0.00489),
vec3(0.00127,0.00011,0.00631),
vec3(0.00161,0.00015,0.00798),
vec3(0.00202,0.0002,0.00996),
vec3(0.0025,0.00026,0.0123),
vec3(0.00307,0.00033,0.01506),
vec3(0.00377,0.00041,0.01847),
vec3(0.00453,0.0005,0.02221),
vec3(0.00545,0.00061,0.0267),
vec3(0.00654,0.00073,0.03207),
vec3(0.00784,0.00088,0.03848),
vec3(0.00938,0.00106,0.0461),
vec3(0.01121,0.00127,0.05512),
vec3(0.01335,0.0015,0.06575),
vec3(0.01586,0.00178,0.07822),
vec3(0.01877,0.0021,0.09276),
vec3(0.02214,0.00245,0.10961),
vec3(0.02601,0.00285,0.12901),
vec3(0.03043,0.0033,0.1512),
vec3(0.03544,0.0038,0.17644),
vec3(0.0411,0.00435,0.20495),
vec3(0.04743,0.00497,0.23692),
vec3(0.05447,0.00566,0.27251),
vec3(0.06224,0.00642,0.31178),
vec3(0.0707,0.00725,0.35471),
vec3(0.07983,0.00814,0.40115),
vec3(0.08954,0.00908,0.45084),
vec3(0.09975,0.01006,0.50342),
vec3(0.1104,0.01106,0.55864),
vec3(0.12146,0.01211,0.61627),
vec3(0.13287,0.01318,0.6761),
vec3(0.14462,0.01429,0.73788),
vec3(0.15665,0.01545,0.8013),
vec3(0.16879,0.01664,0.86556),
vec3(0.18083,0.01785,0.92958),
vec3(0.19252,0.01907,0.99213),
vec3(0.20357,0.02027,1.05182),
vec3(0.21375,0.02145,1.10751),
vec3(0.22313,0.0226,1.15953),
vec3(0.23192,0.02375,1.20887),
vec3(0.24039,0.02491,1.25683),
vec3(0.24885,0.02612,1.30501),
vec3(0.25759,0.0274,1.35476),
vec3(0.2665,0.02875,1.40559),
vec3(0.27535,0.03017,1.45641),
vec3(0.28389,0.03165,1.50596),
vec3(0.29182,0.03319,1.55283),
vec3(0.29892,0.03478,1.5959),
vec3(0.3053,0.03641,1.63577),
vec3(0.3112,0.0381,1.67357),
vec3(0.3169,0.03982,1.7106),
vec3(0.32271,0.04158,1.74828),
vec3(0.32882,0.04337,1.7875),
vec3(0.33492,0.04517,1.82661),
vec3(0.34055,0.04695,1.86311),
vec3(0.34517,0.04869,1.89433),
vec3(0.34826,0.05034,1.91748),
vec3(0.34942,0.05188,1.93053),
vec3(0.34891,0.05332,1.93482),
vec3(0.34717,0.05471,1.93265),
vec3(0.34467,0.05606,1.9264),
vec3(0.34185,0.05743,1.91844),
vec3(0.33902,0.05885,1.91043),
vec3(0.33599,0.06031,1.90122),
vec3(0.33243,0.06179,1.889),
vec3(0.32802,0.06327,1.872),
vec3(0.32246,0.06472,1.84855),
vec3(0.31562,0.06615,1.81779),
vec3(0.30782,0.06757,1.78163),
vec3(0.29948,0.06905,1.74251),
vec3(0.29098,0.07063,1.70275),
vec3(0.28266,0.07238,1.66444),
vec3(0.2748,0.07436,1.62921),
vec3(0.26743,0.07659,1.59736),
vec3(0.26058,0.07911,1.5689),
vec3(0.25427,0.08195,1.54382),
vec3(0.24853,0.08515,1.52216),
vec3(0.2433,0.08873,1.50361),
vec3(0.23834,0.09266,1.48667),
vec3(0.23333,0.0969,1.4696),
vec3(0.22796,0.10137,1.45071),
vec3(0.22198,0.10601,1.42844),
vec3(0.21517,0.11074,1.40159),
vec3(0.20756,0.11551,1.37009),
vec3(0.19922,0.12031,1.33422),
vec3(0.19023,0.12512,1.29428),
vec3(0.18069,0.1299,1.25061),
vec3(0.17072,0.13463,1.2037),
vec3(0.16045,0.13933,1.15432),
vec3(0.15002,0.14402,1.10328),
vec3(0.13957,0.14874,1.05135),
vec3(0.12919,0.15351,0.99918),
vec3(0.11899,0.15836,0.9474),
vec3(0.10906,0.16332,0.89662),
vec3(0.09951,0.16838,0.8474),
vec3(0.09042,0.17354,0.80016),
vec3(0.08183,0.1788,0.75524),
vec3(0.07377,0.18418,0.71279),
vec3(0.06619,0.18966,0.67252),
vec3(0.05906,0.19521,0.6341),
vec3(0.05234,0.20083,0.59724),
vec3(0.04601,0.20648,0.56173),
vec3(0.04006,0.21218,0.52749),
vec3(0.03454,0.21803,0.49488),
vec3(0.02949,0.22416,0.46426),
vec3(0.02492,0.23073,0.43588),
vec3(0.02084,0.23792,0.40993),
vec3(0.01724,0.24587,0.38643),
vec3(0.01408,0.2546,0.36506),
vec3(0.01135,0.26408,0.34548),
vec3(0.00902,0.27425,0.32741),
vec3(0.0071,0.28507,0.31059),
vec3(0.00557,0.29648,0.29481),
vec3(0.00439,0.3085,0.27982),
vec3(0.00352,0.32114,0.26541),
vec3(0.00289,0.33442,0.25141),
vec3(0.00246,0.34835,0.23768),
vec3(0.00221,0.36296,0.22412),
vec3(0.00215,0.37823,0.21075),
vec3(0.00234,0.39414,0.19758),
vec3(0.00282,0.41066,0.18466),
vec3(0.00365,0.42776,0.172),
vec3(0.00489,0.4454,0.15969),
vec3(0.00663,0.46354,0.14794),
vec3(0.00894,0.48214,0.13694),
vec3(0.0119,0.50114,0.12683),
vec3(0.01557,0.5205,0.11768),
vec3(0.01998,0.54014,0.1095),
vec3(0.02505,0.56002,0.10209),
vec3(0.03068,0.5801,0.09528),
vec3(0.03675,0.60032,0.0889),
vec3(0.04315,0.62063,0.08284),
vec3(0.04979,0.64094,0.07701),
vec3(0.05669,0.66108,0.07144),
vec3(0.06392,0.68081,0.06615),
vec3(0.07154,0.6999,0.06117),
vec3(0.07963,0.71809,0.0565),
vec3(0.08821,0.73516,0.05215),
vec3(0.09727,0.75118,0.0481),
vec3(0.10675,0.76631,0.04432),
vec3(0.11662,0.78074,0.0408),
vec3(0.12685,0.79464,0.03752),
vec3(0.13741,0.80821,0.03447),
vec3(0.14825,0.82138,0.03164),
vec3(0.15931,0.83407,0.02902),
vec3(0.17052,0.84617,0.0266),
vec3(0.1818,0.85758,0.02438),
vec3(0.19311,0.86824,0.02234),
vec3(0.20451,0.87831,0.02046),
vec3(0.21612,0.88799,0.01873),
vec3(0.22807,0.89752,0.01714),
vec3(0.2405,0.90713,0.01566),
vec3(0.25354,0.91699,0.0143),
vec3(0.26713,0.92693,0.01304),
vec3(0.28114,0.93667,0.01188),
vec3(0.29542,0.94595,0.01082),
vec3(0.30981,0.95447,0.00985),
vec3(0.32417,0.96198,0.00896),
vec3(0.33843,0.96844,0.00815),
vec3(0.35258,0.97383,0.00742),
vec3(0.36658,0.97815,0.00674),
vec3(0.38042,0.98141,0.00613),
vec3(0.3941,0.98367,0.00557),
vec3(0.4077,0.98521,0.00506),
vec3(0.42135,0.98638,0.0046),
vec3(0.4352,0.98754,0.00418),
vec3(0.44942,0.98902,0.00379),
vec3(0.46416,0.99108,0.00344),
vec3(0.47944,0.99349,0.00312),
vec3(0.49522,0.99592,0.00283),
vec3(0.51144,0.99802,0.00257),
vec3(0.52802,0.99946,0.00233),
vec3(0.54487,0.99999,0.00211),
vec3(0.56189,0.99976,0.00192),
vec3(0.57901,0.99898,0.00174),
vec3(0.59619,0.99791,0.00158),
vec3(0.61338,0.99677,0.00143),
vec3(0.63059,0.99574,0.0013),
vec3(0.64792,0.99471,0.00118),
vec3(0.66549,0.99355,0.00107),
vec3(0.68338,0.99212,0.00097),
vec3(0.70168,0.99025,0.00088),
vec3(0.72041,0.98786,0.0008),
vec3(0.73945,0.98493,0.00073),
vec3(0.75863,0.9815,0.00066),
vec3(0.77779,0.9776,0.0006),
vec3(0.79678,0.97326,0.00055),
vec3(0.81545,0.96848,0.0005),
vec3(0.83374,0.96314,0.00045),
vec3(0.85155,0.95711,0.00041),
vec3(0.86879,0.95025,0.00037),
vec3(0.88534,0.94246,0.00034),
vec3(0.90116,0.93369,0.00031),
vec3(0.91653,0.92429,0.00028),
vec3(0.93182,0.91467,0.00026),
vec3(0.94745,0.90523,0.00023),
vec3(0.96384,0.89636,0.00021),
vec3(0.98126,0.88831,0.00019),
vec3(0.9993,0.88085,0.00018),
vec3(1.01734,0.87364,0.00016),
vec3(1.03479,0.86638,0.00015),
vec3(1.05101,0.85872,0.00013),
vec3(1.06552,0.85043,0.00012),
vec3(1.07842,0.8415,0.00011),
vec3(1.08994,0.83201,0.0001),
vec3(1.10032,0.82202,0.00009),
vec3(1.10977,0.81159,0.00008),
vec3(1.11844,0.80079,0.00008),
vec3(1.12627,0.78965,0.00007),
vec3(1.13314,0.77821,0.00007),
vec3(1.13895,0.76647,0.00006),
vec3(1.14362,0.75448,0.00005),
vec3(1.1471,0.74225,0.00005),
vec3(1.14946,0.72982,0.00005),
vec3(1.15084,0.71725,0.00004),
vec3(1.15133,0.70458,0.00004),
vec3(1.15103,0.69186,0.00004),
vec3(1.15,0.6791,0.00003),
vec3(1.14806,0.66628,0.00003),
vec3(1.145,0.65336,0.00003),
vec3(1.14062,0.64028,0.00003),
vec3(1.13476,0.62701,0.00002),
vec3(1.1273,0.61351,0.00002),
vec3(1.11834,0.59985,0.00002),
vec3(1.10803,0.58607,0.00002),
vec3(1.09651,0.57223,0.00002),
vec3(1.08393,0.55837,0.00002),
vec3(1.07039,0.54455,0.00001),
vec3(1.05593,0.53077,0.00001),
vec3(1.04059,0.51701,0.00001),
vec3(1.02439,0.50329,0.00001),
vec3(1.00734,0.4896,0.00001),
vec3(0.98953,0.47594,0.0),
vec3(0.97112,0.4624,0.0),
vec3(0.95233,0.44902,0.0),
vec3(0.93332,0.43586,0.0),
vec3(0.91429,0.42299,0.0),
vec3(0.89528,0.41042,0.0),
vec3(0.87602,0.39804,0.0),
vec3(0.85616,0.38573,0.0),
vec3(0.83542,0.37339,0.0),
vec3(0.81356,0.36092,0.0),
vec3(0.79046,0.34829,0.0),
vec3(0.76644,0.33557,0.0),
vec3(0.74188,0.3229,0.0),
vec3(0.71712,0.31037,0.0),
vec3(0.69247,0.29809,0.0),
vec3(0.66816,0.28612,0.0),
vec3(0.64427,0.27448,0.0),
vec3(0.62085,0.2632,0.0),
vec3(0.59792,0.25226,0.0),
vec3(0.57554,0.24169,0.0),
vec3(0.55373,0.23148,0.0),
vec3(0.53254,0.22164,0.0),
vec3(0.51202,0.21216,0.0),
vec3(0.49221,0.20305,0.0),
vec3(0.47312,0.19431,0.0),
vec3(0.45474,0.18592,0.0),
vec3(0.43687,0.17783,0.0),
vec3(0.41931,0.16997,0.0),
vec3(0.4019,0.16228,0.0),
vec3(0.3845,0.15474,0.0),
vec3(0.36706,0.14731,0.0),
vec3(0.34972,0.14002,0.0),
vec3(0.33263,0.1329,0.0),
vec3(0.31593,0.12599,0.0),
vec3(0.29974,0.11931,0.0),
vec3(0.28412,0.11288,0.0),
vec3(0.26911,0.10671,0.0),
vec3(0.25471,0.10081,0.0),
vec3(0.24093,0.09517,0.0),
vec3(0.22778,0.0898,0.0),
vec3(0.21524,0.08469,0.0),
vec3(0.2033,0.07984,0.0),
vec3(0.19193,0.07523,0.0),
vec3(0.1811,0.07086,0.0),
vec3(0.17079,0.06671,0.0),
vec3(0.16098,0.06277,0.0),
vec3(0.15166,0.05904,0.0),
vec3(0.14279,0.05551,0.0),
vec3(0.13437,0.05216,0.0),
vec3(0.12638,0.049,0.0),
vec3(0.1188,0.04601,0.0),
vec3(0.11161,0.04318,0.0),
vec3(0.1048,0.04051,0.0),
vec3(0.09835,0.03798,0.0),
vec3(0.09225,0.0356,0.0),
vec3(0.08648,0.03335,0.0),
vec3(0.08102,0.03122,0.0),
vec3(0.07587,0.02922,0.0),
vec3(0.071,0.02733,0.0),
vec3(0.0664,0.02554,0.0),
vec3(0.06206,0.02386,0.0),
vec3(0.05797,0.02228,0.0),
vec3(0.05413,0.02079,0.0),
vec3(0.05051,0.01939,0.0),
vec3(0.04711,0.01808,0.0),
vec3(0.04391,0.01685,0.0),
vec3(0.04091,0.01569,0.0),
vec3(0.03809,0.0146,0.0),
vec3(0.03543,0.01358,0.0),
vec3(0.03292,0.01262,0.0),
vec3(0.03056,0.01171,0.0),
vec3(0.02834,0.01086,0.0),
vec3(0.02628,0.01006,0.0),
vec3(0.02437,0.00933,0.0),
vec3(0.02262,0.00866,0.0),
vec3(0.02102,0.00805,0.0),
vec3(0.01955,0.00748,0.0),
vec3(0.01819,0.00696,0.0),
vec3(0.01693,0.00648,0.0),
vec3(0.01575,0.00603,0.0),
vec3(0.01466,0.00561,0.0),
vec3(0.01364,0.00522,0.0),
vec3(0.01268,0.00485,0.0),
vec3(0.01179,0.00451,0.0),
vec3(0.01097,0.0042,0.0),
vec3(0.0102,0.0039,0.0),
vec3(0.00948,0.00363,0.0),
vec3(0.00882,0.00337,0.0),
vec3(0.00819,0.00313,0.0),
vec3(0.00761,0.00291,0.0),
vec3(0.00706,0.0027,0.0),
vec3(0.00655,0.00251,0.0),
vec3(0.00607,0.00232,0.0),
vec3(0.00563,0.00215,0.0),
vec3(0.00521,0.002,0.0),
vec3(0.00483,0.00185,0.0),
vec3(0.00448,0.00171,0.0),
vec3(0.00415,0.00159,0.0),
vec3(0.00385,0.00147,0.0),
vec3(0.00357,0.00137,0.0),
vec3(0.00331,0.00127,0.0),
vec3(0.00308,0.00118,0.0),
vec3(0.00286,0.00109,0.0),
vec3(0.00265,0.00102,0.0),
vec3(0.00246,0.00094,0.0),
vec3(0.00229,0.00088,0.0),
vec3(0.00213,0.00082,0.0),
vec3(0.00197,0.00076,0.0),
vec3(0.00183,0.0007,0.0),
vec3(0.0017,0.00065,0.0),
vec3(0.00158,0.00061,0.0),
vec3(0.00147,0.00057,0.0),
vec3(0.00137,0.00053,0.0),
vec3(0.00127,0.00049,0.0),
vec3(0.00119,0.00046,0.0),
vec3(0.0011,0.00042,0.0),
vec3(0.00103,0.00039,0.0),
vec3(0.00096,0.00037,0.0),
vec3(0.00089,0.00034,0.0),
vec3(0.00083,0.00032,0.0),
vec3(0.00077,0.0003,0.0),
vec3(0.00071,0.00028,0.0),
vec3(0.00066,0.00026,0.0),
vec3(0.00062,0.00024,0.0),
vec3(0.00058,0.00022,0.0),
vec3(0.00054,0.00021,0.0),
vec3(0.0005,0.00019,0.0),
vec3(0.00047,0.00018,0.0),
vec3(0.00044,0.00017,0.0),
vec3(0.00041,0.00016,0.0),
vec3(0.00038,0.00015,0.0),
vec3(0.00035,0.00014,0.0),
vec3(0.00033,0.00013,0.0),
vec3(0.00031,0.00012,0.0),
vec3(0.00029,0.00011,0.0),
vec3(0.00027,0.0001,0.0),
vec3(0.00025,0.0001,0.0),
vec3(0.00023,0.00009,0.0),
vec3(0.00022,0.00008,0.0),
vec3(0.0002,0.00008,0.0),
vec3(0.00019,0.00007,0.0),
vec3(0.00018,0.00007,0.0),
vec3(0.00016,0.00006,0.0),
vec3(0.00015,0.00006,0.0),
vec3(0.00014,0.00006,0.0),
vec3(0.00013,0.00005,0.0),
vec3(0.00013,0.00005,0.0),
vec3(0.00012,0.00005,0.0),
vec3(0.00011,0.00004,0.0),
vec3(0.0001,0.00004,0.0),
vec3(0.0001,0.00004,0.0),
vec3(0.00009,0.00003,0.0),
vec3(0.00008,0.00003,0.0),
vec3(0.00008,0.00003,0.0),
vec3(0.00007,0.00003,0.0),
vec3(0.00007,0.00003,0.0),
vec3(0.00006,0.00003,0.0),
vec3(0.00006,0.00002,0.0),
vec3(0.00006,0.00002,0.0),
vec3(0.00005,0.00002,0.0),
vec3(0.00005,0.00002,0.0),
vec3(0.00005,0.00002,0.0),
vec3(0.00004,0.00002,0.0),
vec3(0.00004,0.00002,0.0),
vec3(0.00004,0.00001,0.0)
);


vec3 wavelengthToXYZ(float wl){
    float ind = wl - WL_SHORTEST;
    if( ind < 0.0 || ind > WL_RANGE ){ // bad arguments
        return vec3(0.0, 0.0, 0.0);
    }
    
    int   low  = int( floor(ind) );
    int   high = int( ceil(ind)  );
    float frac = fract(ind);
    
    return CIE2006_XYZ[low] * (1.0 - frac) + CIE2006_XYZ[high] * (frac);
}
    
vec3 XYZtoRGB(vec3 XYZ)
{
	return XYZ * mat3( 3.240479, -1.537150, -0.498535,
	                  -0.969256 , 1.875991,  0.041556,
	                   0.055648, -0.204043,  1.057311 );
}

float cross2(vec2 a, vec2 b) { return a.x*b.y - a.y*b.x; } 

vec2 intersectSegment(vec2 p0, vec2 p1, vec2 p2, vec2 p3)
{
    vec2 s1 = p1-p0, s2 = p3-p2;

    float d = cross2(s1,s2),
          s = cross2(s1, p0-p2) / d,
          t = cross2(s2, p0-p2) / d;

    return s >= 0. && s <= 1. && t >= 0. && t <= 1.
         ? p0 + t*s1    // Collision detected
         : p0;
}

vec3 XYZtoUniformRGBGamut(vec3 col, float desat)
{
    vec2 xy = col.xy / (col.x + col.y + col.z);
    
    vec2 red   = vec2(0.64,   0.33  ),
         green = vec2(0.3,    0.6   ),
         blue  = vec2(0.15,   0.06  ),
         white = vec2(0.3127, 0.3290);
    
    xy = mix(xy, white, desat); // make gamut clip less obvious by desaturating
    
    xy = intersectSegment(xy, white, red,   green);
    xy = intersectSegment(xy, white, green, blue );
    xy = intersectSegment(xy, white, blue,  red  );
    
    vec3 xyz = col.y * vec3( xy, 1. - xy.x - xy.y ) / xy.y;
    float len = max( length(xyz), 0.41542 ); // https://www.desmos.com/calculator/ffyenyxuye
    
    return xyz / len;
}

const float FQ_MAX = 1.0 / WL_SHORTEST;
const float FQ_MIN = 1.0 / WL_LONGEST;
const float FQ_RANGE = FQ_MAX - FQ_MIN;

void main()
{
    vec2 uv = v_texCoord;
    
    float fq = FQ_MIN + uv.x * FQ_RANGE;
    float wl = 1.0 / fq;
    
    // wl = uv.x * WL_RANGE + WL_SHORTEST;
    
    vec3 color2 = XYZtoRGB( XYZtoUniformRGBGamut( wavelengthToXYZ( wl ), 0.15 ) );

    vec3 color3 = pow(max(vec3(0),color2), vec3(1./2.2)); // with gamma
    color3 = color3 * pow(uv.y * 2.0, 2.2/1.);
	outColor = vec4(color3,1.);
}
